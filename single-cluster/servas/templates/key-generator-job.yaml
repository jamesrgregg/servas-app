apiVersion: v1
kind: ServiceAccount
metadata:
  name: key-generator-sa
  namespace: demo-project
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-creator
  namespace: demo-project
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update", "delete", "patch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create", "delete", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: key-generator-secret-creator
  namespace: demo-project
subjects:
- kind: ServiceAccount
  name: key-generator-sa
  namespace: demo-project
roleRef:
  kind: Role
  name: secret-creator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: servas-key-generator
  namespace: demo-project
  labels:
    app: servas
spec:
  template:
    spec:
      serviceAccountName: key-generator-sa
      containers:
      - name: key-generator
        image: bitnami/kubectl:latest
        command: ['/bin/sh', '-c']
        args:
        - |
          # Generate the key using the servas container
          APP_KEY=$(kubectl run -n demo-project temp-pod --image={{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }} --restart=Never --command -- php artisan key:generate --show)
          echo "Generated APP_KEY: $APP_KEY"
          
          # Create the secret
          kubectl create secret generic servas-key -n demo-project --from-literal=APP_KEY="$APP_KEY" --dry-run=client -o yaml | kubectl apply -f -
          
          # Clean up the temp pod
          kubectl delete pod temp-pod -n demo-project
      restartPolicy: Never
  backoffLimit: 4 